package net.topaze.kame;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JTextField;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import net.topaze.kame.impl.springsecurity.KameImpl;/** * @author topaze * */public class Kamehameha extends JFrame {    private static final long serialVersionUID = -1019066731937525329L;    private static final Logger LOGGER = LoggerFactory.getLogger(KameImpl.class);    private static final CharSequence DEFAULT_SALT = "00";    private static final int KEY_SIZE = 4;    private JTextField key;    private JTextArea in;    private JTextArea out;    private JButton code;    private JButton decode;    private JLabel status;    private Kame kame;        /**     *      */    public Kamehameha() {	key = new JTextField(KameImpl.getSalt(KEY_SIZE).toString());			in = new JTextArea();	out = new JTextArea();	code = new JButton("encrypt");	decode = new JButton("decrypt");	status = new JLabel("");	status.setHorizontalAlignment(JLabel.CENTER);	GridLayout layout = new GridLayout(6,1);	getContentPane().setLayout(layout);		getContentPane().add(key);	getContentPane().add(new JScrollPane(in));	getContentPane().add(new JScrollPane(out));	getContentPane().add(code);	getContentPane().add(decode);	getContentPane().add(status);	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		setTitle("Kamehameha AES-256 codec");	code.addActionListener(new CodeActionListener());	decode.addActionListener(new DecodeActionListener());		kame = new KameImpl(key.getText(), DEFAULT_SALT);	key.addKeyListener(new KeyListener() {	    @Override	    public void keyTyped(KeyEvent e) {		if(key.getText()!=null) {		    kame = new KameImpl(key.getText(), DEFAULT_SALT);		    LOGGER.debug("new kame");		}	    }	    @Override	    public void keyReleased(KeyEvent e) {}	    @Override	    public void keyPressed(KeyEvent e) {}	});	key.addMouseListener(new MouseAdapter() {	    @Override	    public void mouseClicked(MouseEvent e) {		if(e.getClickCount()==2) {		    key.setText(KameImpl.getSalt(KEY_SIZE).toString());		    kame = new KameImpl(key.getText(), DEFAULT_SALT);		}	    }	});    }    /**     * @author topaze     *     */    public class CodeActionListener implements ActionListener {		public void actionPerformed(ActionEvent ae) {	    String sin = Kamehameha.this.getIn().getText();	    	    String sout = Kamehameha.this.kame.encrypt(sin);		    LOGGER.info("({},{}) : {} => {}", kame.getKey(), kame.getSalt(), sin, sout);	    if(sout==null) {		Kamehameha.this.getStatus().setText("code - error");	    } else {		Kamehameha.this.getStatus().setText("code - ok");	    }	    LOGGER.info("{} => {} : {}", sin.length(), sout.length(), sout.length()/sin.length());	    Kamehameha.this.getOut().setText(sout);	}    }    /**     *      * @author topaze     *      */    public class DecodeActionListener implements ActionListener {		public void actionPerformed(ActionEvent ae) {	    String sout = Kamehameha.this.getOut().getText();	    	    String sin = Kamehameha.this.kame.decrypt(sout);		    LOGGER.info("({},{}) : {} => {}", kame.getKey(), kame.getSalt(), sout, sin);	    if(sout==null) {		Kamehameha.this.getStatus().setText("code - error");	    } else {		Kamehameha.this.getStatus().setText("code - ok");	    }	    	    Kamehameha.this.getIn().setText(sin);	}    }    /**     * @return     */    public JButton getCode() {	return code;    }    /**     * @return     */    public JButton getDecode() {	return decode;    }    /**     * @return     */    public JTextArea getIn() {	return in;    }    /**     * @return     */    public JTextArea getOut() {	return out;    }    /**     * @return     */    public JTextField getKey() {	return key;    }    /**     * @return Returns the status.     */    public JLabel getStatus() {	return status;    }    /**     * @param status The status to set.     */    public void setStatus(JLabel status) {	this.status = status;    }        /**     * @return     */    public Kame getKame() {        return kame;    }        /**     * @param kame     */    public void setKame(Kame kame) {        this.kame = kame;    }    /**     *      * @param args     */    public static void main(String[] args) {	Kamehameha frame = new Kamehameha();	frame.setSize(300, 300);	//	frame.pack();	frame.setLocation(100, 100);	frame.setVisible(true);    }}